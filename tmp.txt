router.get('/register', registerValidator, (req, res) => {
  const error = req.flash('error') || ''
  res.render('register', { error })
})


router.post('/register', registerValidator, async (req, res) => {
  const result = validationResult(req);

  if (!result.isEmpty()) {

    const mappedResult = result.mapped()

    let message;
    for (fields in mappedResult) {
      message = mappedResult[fields].msg
      console.log(message)
      break;
    }

    req.flash('error', message)

    return res.redirect('/register');
  }

  const { username, email, phone, password, address, fullname, birthday } = req.body;

  try {
    const user = await User.findOne({ email: email });
    if (user) {
      req.flash('error', 'User already exists')

      return res.redirect('/register');

    }

    const hashedPassword = await bcrypt.hash(password, saltRounds);
    let userId = generateUserId()
    const newUser = new User({
      userId: userId,
      email: email,
      phone: phone,
      username: username,
      fullname: fullname,
      address: address,
      birthday: birthday,
      password: hashedPassword
    });

    await newUser.save();
    return res.redirect('/login');
  } catch (err) {
    console.error(err);
    return res.status(500).send('Server error');
  }
})
////////////////////otp///////////////////////
router.get('/register/verify-otp', (req, res) => {
  res.render('OTP')
})

router.post('/register/verify-otp', (req, res) => {
  res.render('OTP')
})